{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the NOW - Learning Management System documentation. The main objetive of NOW - LMS is to be a simple to {install, use, configure, mantain} learning management system. Getting Started There are to main install opcions to ger NOW - LMS running from the Pypi Package or the OCI Image","title":"Inicio"},{"location":"#welcome-to-the-now-learning-management-system-documentation","text":"The main objetive of NOW - LMS is to be a simple to {install, use, configure, mantain} learning management system.","title":"Welcome to the NOW - Learning Management System documentation."},{"location":"#getting-started","text":"There are to main install opcions to ger NOW - LMS running from the Pypi Package or the OCI Image","title":"Getting Started"},{"location":"CONTRIBUTING/","text":"Contributing with NOW Learning Management System. Thank you for your interest in collaborating with NOW Learning Management System. (the project). Project License. NOW LMS is free and open source software released under the Apache Version 2 license (the license of the proyect), this means that project users can: Use the project for profit or not. Modify the project to fit theirs specific needs (clearly defining the changes made to the original project). However, users cannot: Make use of the project trademarks without explicit permission. Require warranties of any kind; the project is distributed as is without guarantees that it may be useful for any specific purpose. Certify the origin of your contributions. To incorporate your contributions to the project we require that you certify that the contribution or contributions are your property or that you have permission from third parties to incorporate the contribution or contributions to the project, following the developer certificate of origin . We recommend running: git commit -s And an appropriate signature will be added to the commit, not included in the commits project without the corresponding Sing-Off. Collaborating with the project: Ways to collaborate. You can collaborate in different ways: Como desarrollador. Como control de Calidad (QA). Escribiendo y mejorando la documentaci\u00f3n o el Manual de Usuario. Aportando ideas de nuevas caracteristicas. Reportando errores. Traduciendo. Brindando gu\u00eda y soporte a otros usuarios. Compartiendo el proyecto con otros. Al formar de la comunidad del proyecto debes seguir el c\u00f3digo de conducta establecido. Colaborando con el desarrollo del proyecto: El desarrollo es multiplataforma, puedes utilizar tanto Windows, Linux o Mac para aportar el proyecto, para colaborar con el proyecto necesitas: GIT Yarn Python La versi\u00f3n minima de Python soportada es: >=3.6 Tecnolog\u00edas utilizadas: Backend: Flask . Frontend: Bootstrap 5 . ORM: SQLAlchemy . El desarrollo se realiza en la rama development , una vez el proyecto sea liberado para producci\u00f3n la rama main contendra la \u00faltma versi\u00f3n apta su uso en producci\u00f3n. Obteniendo el codigo fuente: Descarga el codigo fuente con: git clone https://github.com/cacao-accounting/cacao-accounting.git cd cacao-accounting Para iniciar el proyecto es necesario seguir estos pasos: Crear un entorno virtual de python. python -m venv venv # Windows: .\\venv\\Scripts\\activate.bat # Linux y MAC: source venv/bin/activate Instalar las dependencias: python -m pip install -r requirements.txt python -m pip install -r development.txt python setup.py develop yarn Yarn es necesario para no tener que incluir librerias JavaScritp de terceros en el repositorio principal del proyecto. Puede verificar que la instalaci\u00f3n fue correcta ejecutando: cacaoctl Usage: python -m flask [OPTIONS] COMMAND [ARGS]... Interfaz de linea de comandos para la administraci\u00f3n de Cacao Accounting. Options: --version Show the flask version --help Show this message and exit. Commands: cleandb Elimina la base de datos, solo disponible para desarrollo. db Perform database migrations. initdb Crea el esquema de la base de datos. routes Show the routes for the app. run Run a development server. serve Inicio la aplicacion con waitress como servidor WSGI por... shell Run a shell in the app context. version Muestra la version actual instalada. Esquema de la base de datos Para crear una base de datos de pruebas ejecutar: cacaoctl initdb Ejecutar servidor de desarrollo: Para acceder al proyecto podemos utilizar el servidor web de desarrollo incluido en flask: FLASK_ENV=development # Linux set FLASK_ENV=\"development\" # Windows cacaoctl run Para verficiar que el proyecto se ejecuta correctamente con un servidor WSGI acto para producci\u00f3n ejecutar: cacaoctl serve El usuario de pruebas es cacao con contrase\u00f1a cacao . Gu\u00eda de estilo: Seguimos PEP8 con un largo de linea de 127 caracteres maximo. Black es una excelente herramienta para dar formato a tu c\u00f3digo antes de hacer commit de tus cambios. Si usa VSCode puede configurar black para formatear sus cambios al guardar. Pruebas automaticas: Utilizamos flake8 y pytest para asegurar la calidad del c\u00f3digo fuente del proyecto. Recomendamos ejecutar antes de enviar tus cambios: black cacao_accounting flake8 cacao_accounting pytest Escribe un buen mensaje en tu commit Agracedemos te tomes tu tiempo para escribir un buen mensaje en tus commit, recomendamos seguir este ejemplo de Chris Beams : Summarize changes in around 50 characters or less More detailed explanatory text, if necessary. Wrap it to about 72 characters or so. In some contexts, the first line is treated as the subject of the commit and the rest of the text as the body. The blank line separating the summary from the body is critical (unless you omit the body entirely); various tools like `log`, `shortlog` and `rebase` can get confused if you run the two together. Explain the problem that this commit is solving. Focus on why you are making this change as opposed to how (the code explains that). Are there side effects or other unintuitive consequences of this change? Here's the place to explain them. Further paragraphs come after blank lines. - Bullet points are okay, too - Typically a hyphen or asterisk is used for the bullet, preceded by a single space, with blank lines in between, but conventions vary here If you use an issue tracker, put references to them at the bottom, like this: Resolves: #123 See also: #456, #789 Otros ejemplos de buenos mensajes de commit se pueden encontrar aca: Buenas Practicas En Commits De Git How to Write a Git Commit Message Utilizar Commits Convencionales: Solicitamos su apoyo para adoptar Commits Convencionales : - build: Cambios que efectan la distribuci\u00f3n del proyecto. - ci: Actualizaci\u00f3n a herramientas para pruebas automaticas. - docs: Actualizacion de la documentaci\u00f3n. - feat: Agrega funcionalidades nuevas. - fix: Correci\u00f3n de errores. - gui: Cambios que afectan la interfaz de usuario pero no la logica de negocios. - refactor: Modificaciones que no agregan nuevas funciones o arreglan errores. - style: Correcciones de Estilo. - test: Cambios en pruebas unitarios. Independientemente del tipo un commit con el texto BREAKING CHANGE, sin importar su tipo, se traducen a un cambio de versi\u00f3n MAJOR. Versionado semantico Para Cacao Accounting hemos adoptado versiones semanticas . Mayor: Al ser una aplicaci\u00f3n contable trabajamos con datos historicos, as\u00ed que cualquier cambio en la estructura de base datos que agregue cambios no compatibles con versiones anteriores se debera considerar un cambio mayor y requerir un lanzamiento mayor. Una migraci\u00f3n efectiva del esquema de la base de datos debe proveerse a los usuarios. Menor: Lanzamiento de nuevas caracteristicas. Path: Correciones menores. Fix: Correci\u00f3n de errores criticos. Ejecutar pruebas unitarias: export CACAOTEST=True pytest Configurar Base de datos para pruebas El proyecto se prueba con SQLite, MySQL 8, Postgresql 13 y MS SQL Server. MySQL Para crear una base de datos de pruebas ejecutar los siguientes queries en MySQL: CREATE DATABASE IF NOT EXISTS cacao; CREATE USER IF NOT EXISTS 'cacao' IDENTIFIED BY 'cacao'; GRANT ALL PRIVILEGES ON cacao.* TO 'cacao'; FLUSH PRIVILEGES; Postgresql Para crear una base de datos de pruebas ejecutar los siguientes queries en Postgresql: CREATE DATABASE cacao; CREATE USER cacao WITH PASSWORD 'cacao'; GRANT ALL PRIVILEGES ON DATABASE cacao TO cacao; Pruebas de integraci\u00f3n Para vaidar que las vases de datos fueron creadas correctamente y la conexi\u00f3n es correcta ejecutar: python tests\\database.py MySQL disponible Postgresql disponible Para ejecutar las pruebas ejecutar: pytest tests\\database.py Empaquetar para distribuci\u00f3n: Para crear los archivos para distribuir el proyecto ejecutar: python -m build twine check dist/* # Solo usuario con permisos de cargar en Pypi. twine upload dist/* Es un objetivo principal que el proyecto sea pip instalable as\u00ed como ofrecer una versi\u00f3n del proyecto que pueda ser utilizada como aplicaci\u00f3n de escritorio , para cumplir este objetivo hemos desarrollado open marquesote . Varios Estos son algunos tips a tomar en cuenta opcionalmente Ignorar correcciones de estilo en git blame git config blame.ignoreRevsFile .git-blame-ignore-revs","title":"Contributing with NOW Learning Management System."},{"location":"CONTRIBUTING/#contributing-with-now-learning-management-system","text":"Thank you for your interest in collaborating with NOW Learning Management System. (the project).","title":"Contributing with NOW Learning Management System."},{"location":"CONTRIBUTING/#project-license","text":"NOW LMS is free and open source software released under the Apache Version 2 license (the license of the proyect), this means that project users can: Use the project for profit or not. Modify the project to fit theirs specific needs (clearly defining the changes made to the original project). However, users cannot: Make use of the project trademarks without explicit permission. Require warranties of any kind; the project is distributed as is without guarantees that it may be useful for any specific purpose.","title":"Project License."},{"location":"CONTRIBUTING/#certify-the-origin-of-your-contributions","text":"To incorporate your contributions to the project we require that you certify that the contribution or contributions are your property or that you have permission from third parties to incorporate the contribution or contributions to the project, following the developer certificate of origin . We recommend running: git commit -s And an appropriate signature will be added to the commit, not included in the commits project without the corresponding Sing-Off.","title":"Certify the origin of your contributions."},{"location":"CONTRIBUTING/#collaborating-with-the-project","text":"","title":"Collaborating with the project:"},{"location":"CONTRIBUTING/#ways-to-collaborate","text":"You can collaborate in different ways: Como desarrollador. Como control de Calidad (QA). Escribiendo y mejorando la documentaci\u00f3n o el Manual de Usuario. Aportando ideas de nuevas caracteristicas. Reportando errores. Traduciendo. Brindando gu\u00eda y soporte a otros usuarios. Compartiendo el proyecto con otros. Al formar de la comunidad del proyecto debes seguir el c\u00f3digo de conducta establecido.","title":"Ways to collaborate."},{"location":"CONTRIBUTING/#colaborando-con-el-desarrollo-del-proyecto","text":"El desarrollo es multiplataforma, puedes utilizar tanto Windows, Linux o Mac para aportar el proyecto, para colaborar con el proyecto necesitas: GIT Yarn Python La versi\u00f3n minima de Python soportada es: >=3.6 Tecnolog\u00edas utilizadas: Backend: Flask . Frontend: Bootstrap 5 . ORM: SQLAlchemy . El desarrollo se realiza en la rama development , una vez el proyecto sea liberado para producci\u00f3n la rama main contendra la \u00faltma versi\u00f3n apta su uso en producci\u00f3n.","title":"Colaborando con el desarrollo del proyecto:"},{"location":"CONTRIBUTING/#obteniendo-el-codigo-fuente","text":"Descarga el codigo fuente con: git clone https://github.com/cacao-accounting/cacao-accounting.git cd cacao-accounting Para iniciar el proyecto es necesario seguir estos pasos:","title":"Obteniendo el codigo fuente:"},{"location":"CONTRIBUTING/#crear-un-entorno-virtual-de-python","text":"python -m venv venv # Windows: .\\venv\\Scripts\\activate.bat # Linux y MAC: source venv/bin/activate","title":"Crear un entorno virtual de python."},{"location":"CONTRIBUTING/#instalar-las-dependencias","text":"python -m pip install -r requirements.txt python -m pip install -r development.txt python setup.py develop yarn Yarn es necesario para no tener que incluir librerias JavaScritp de terceros en el repositorio principal del proyecto. Puede verificar que la instalaci\u00f3n fue correcta ejecutando: cacaoctl Usage: python -m flask [OPTIONS] COMMAND [ARGS]... Interfaz de linea de comandos para la administraci\u00f3n de Cacao Accounting. Options: --version Show the flask version --help Show this message and exit. Commands: cleandb Elimina la base de datos, solo disponible para desarrollo. db Perform database migrations. initdb Crea el esquema de la base de datos. routes Show the routes for the app. run Run a development server. serve Inicio la aplicacion con waitress como servidor WSGI por... shell Run a shell in the app context. version Muestra la version actual instalada.","title":"Instalar las dependencias:"},{"location":"CONTRIBUTING/#esquema-de-la-base-de-datos","text":"Para crear una base de datos de pruebas ejecutar: cacaoctl initdb","title":"Esquema de la base de datos"},{"location":"CONTRIBUTING/#ejecutar-servidor-de-desarrollo","text":"Para acceder al proyecto podemos utilizar el servidor web de desarrollo incluido en flask: FLASK_ENV=development # Linux set FLASK_ENV=\"development\" # Windows cacaoctl run Para verficiar que el proyecto se ejecuta correctamente con un servidor WSGI acto para producci\u00f3n ejecutar: cacaoctl serve El usuario de pruebas es cacao con contrase\u00f1a cacao .","title":"Ejecutar servidor de desarrollo:"},{"location":"CONTRIBUTING/#guia-de-estilo","text":"Seguimos PEP8 con un largo de linea de 127 caracteres maximo. Black es una excelente herramienta para dar formato a tu c\u00f3digo antes de hacer commit de tus cambios. Si usa VSCode puede configurar black para formatear sus cambios al guardar.","title":"Gu\u00eda de estilo:"},{"location":"CONTRIBUTING/#pruebas-automaticas","text":"Utilizamos flake8 y pytest para asegurar la calidad del c\u00f3digo fuente del proyecto. Recomendamos ejecutar antes de enviar tus cambios: black cacao_accounting flake8 cacao_accounting pytest","title":"Pruebas automaticas:"},{"location":"CONTRIBUTING/#escribe-un-buen-mensaje-en-tu-commit","text":"Agracedemos te tomes tu tiempo para escribir un buen mensaje en tus commit, recomendamos seguir este ejemplo de Chris Beams : Summarize changes in around 50 characters or less More detailed explanatory text, if necessary. Wrap it to about 72 characters or so. In some contexts, the first line is treated as the subject of the commit and the rest of the text as the body. The blank line separating the summary from the body is critical (unless you omit the body entirely); various tools like `log`, `shortlog` and `rebase` can get confused if you run the two together. Explain the problem that this commit is solving. Focus on why you are making this change as opposed to how (the code explains that). Are there side effects or other unintuitive consequences of this change? Here's the place to explain them. Further paragraphs come after blank lines. - Bullet points are okay, too - Typically a hyphen or asterisk is used for the bullet, preceded by a single space, with blank lines in between, but conventions vary here If you use an issue tracker, put references to them at the bottom, like this: Resolves: #123 See also: #456, #789 Otros ejemplos de buenos mensajes de commit se pueden encontrar aca: Buenas Practicas En Commits De Git How to Write a Git Commit Message","title":"Escribe un buen mensaje en tu commit"},{"location":"CONTRIBUTING/#utilizar-commits-convencionales","text":"Solicitamos su apoyo para adoptar Commits Convencionales : - build: Cambios que efectan la distribuci\u00f3n del proyecto. - ci: Actualizaci\u00f3n a herramientas para pruebas automaticas. - docs: Actualizacion de la documentaci\u00f3n. - feat: Agrega funcionalidades nuevas. - fix: Correci\u00f3n de errores. - gui: Cambios que afectan la interfaz de usuario pero no la logica de negocios. - refactor: Modificaciones que no agregan nuevas funciones o arreglan errores. - style: Correcciones de Estilo. - test: Cambios en pruebas unitarios. Independientemente del tipo un commit con el texto BREAKING CHANGE, sin importar su tipo, se traducen a un cambio de versi\u00f3n MAJOR.","title":"Utilizar Commits Convencionales:"},{"location":"CONTRIBUTING/#versionado-semantico","text":"Para Cacao Accounting hemos adoptado versiones semanticas . Mayor: Al ser una aplicaci\u00f3n contable trabajamos con datos historicos, as\u00ed que cualquier cambio en la estructura de base datos que agregue cambios no compatibles con versiones anteriores se debera considerar un cambio mayor y requerir un lanzamiento mayor. Una migraci\u00f3n efectiva del esquema de la base de datos debe proveerse a los usuarios. Menor: Lanzamiento de nuevas caracteristicas. Path: Correciones menores. Fix: Correci\u00f3n de errores criticos.","title":"Versionado semantico"},{"location":"CONTRIBUTING/#ejecutar-pruebas-unitarias","text":"export CACAOTEST=True pytest","title":"Ejecutar pruebas unitarias:"},{"location":"CONTRIBUTING/#configurar-base-de-datos-para-pruebas","text":"El proyecto se prueba con SQLite, MySQL 8, Postgresql 13 y MS SQL Server.","title":"Configurar Base de datos para pruebas"},{"location":"CONTRIBUTING/#mysql","text":"Para crear una base de datos de pruebas ejecutar los siguientes queries en MySQL: CREATE DATABASE IF NOT EXISTS cacao; CREATE USER IF NOT EXISTS 'cacao' IDENTIFIED BY 'cacao'; GRANT ALL PRIVILEGES ON cacao.* TO 'cacao'; FLUSH PRIVILEGES;","title":"MySQL"},{"location":"CONTRIBUTING/#postgresql","text":"Para crear una base de datos de pruebas ejecutar los siguientes queries en Postgresql: CREATE DATABASE cacao; CREATE USER cacao WITH PASSWORD 'cacao'; GRANT ALL PRIVILEGES ON DATABASE cacao TO cacao;","title":"Postgresql"},{"location":"CONTRIBUTING/#pruebas-de-integracion","text":"Para vaidar que las vases de datos fueron creadas correctamente y la conexi\u00f3n es correcta ejecutar: python tests\\database.py MySQL disponible Postgresql disponible Para ejecutar las pruebas ejecutar: pytest tests\\database.py","title":"Pruebas de integraci\u00f3n"},{"location":"CONTRIBUTING/#empaquetar-para-distribucion","text":"Para crear los archivos para distribuir el proyecto ejecutar: python -m build twine check dist/* # Solo usuario con permisos de cargar en Pypi. twine upload dist/* Es un objetivo principal que el proyecto sea pip instalable as\u00ed como ofrecer una versi\u00f3n del proyecto que pueda ser utilizada como aplicaci\u00f3n de escritorio , para cumplir este objetivo hemos desarrollado open marquesote .","title":"Empaquetar para distribuci\u00f3n:"},{"location":"CONTRIBUTING/#varios","text":"Estos son algunos tips a tomar en cuenta opcionalmente","title":"Varios"},{"location":"CONTRIBUTING/#ignorar-correcciones-de-estilo-en-git-blame","text":"git config blame.ignoreRevsFile .git-blame-ignore-revs","title":"Ignorar correcciones de estilo en git blame"},{"location":"oci/","text":"Install NOW - LMS with the OCI image.","title":"Install NOW - LMS with the OCI image."},{"location":"oci/#install-now-lms-with-the-oci-image","text":"","title":"Install NOW - LMS with the OCI image."},{"location":"pypi/","text":"Install NOW - LMS with the phyton package.","title":"Install NOW - LMS with the phyton package."},{"location":"pypi/#install-now-lms-with-the-phyton-package","text":"","title":"Install NOW - LMS with the phyton package."}]}