name: Databases

on:
    push:
        branches: [main, development]

jobs:
    multiple_db_check:
        name: Test with multiple databases
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - name: Set up Python 3
              uses: actions/setup-python@v5
              with:
                  python-version: 3.12 # Keep in sync in the python version in the Dockerfile
            - name: Install python package
              env:
                  CI: True
                  LOG_LEVEL: TRACE
              run: |
                  python -m pip install --upgrade pip
                  python -m pip install -r test.txt
                  python -m pip install -e .
                  python -m pip install psycopg2-binary mysqlclient pg8000
            - name: Test with SQLite
              env:
                  CI: True
                  SECRET_KEY: ASD123klj+aAddS
                  LOG_LEVEL: TRACE
              run: |
                  pytest  -v --exitfirst --cov=now_lms --use-cases=True
            - name: Test with Postgresql + psycopg2
              env:
                  CI: True
                  SECRET_KEY: ASD123klj+aAddSadasaaafsfafaSASASSAGSGSGSGSGSGSSDFASFAS
                  DATABASE_URL: postgresql+psycopg2://lmsctl1:lmsctl1@127.0.0.1:5432/lmsctl1
                  ADMIN_USER: hello
                  ADMIN_PSWD: world
                  FLASK_APP: now_lms
                  LOG_LEVEL: TRACE
              run: |
                  sudo systemctl start postgresql.service
                  sudo -u postgres psql -c "CREATE USER lmsctl1 WITH PASSWORD 'lmsctl1';"
                  sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON SCHEMA public TO lmsctl1;"
                  sudo -u postgres psql -c "CREATE DATABASE lmsctl1;"
                  sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE lmsctl1 TO lmsctl1;"
                  sudo -u postgres psql -c "ALTER DATABASE lmsctl1 OWNER TO lmsctl1;"
                  sudo -u postgres psql -c "ALTER ROLE lmsctl1 CREATEDB;"
                  sudo -u postgres psql -c "GRANT USAGE ON SCHEMA public TO lmsctl1;"
                  sudo -u postgres psql -c "GRANT CREATE ON SCHEMA public TO lmsctl1;"
                  pytest  -v --exitfirst --cov=now_lms  --use-cases=True --cov-append
            - name: Test with Postgresql + pg8000
              env:
                  CI: True
                  SECRET_KEY: ASD123klj+aAddSASGGSGSGSGSGSSDFASFASFAFASASaggggdgdgds
                  DATABASE_URL: postgresql+pg8000://lmsctl2:lmsctl2@127.0.0.1:5432/lmsctl2
                  ADMIN_USER: hello
                  ADMIN_PSWD: world
                  FLASK_APP: now_lms
                  LOG_LEVEL: TRACE
              run: |
                  sudo -u postgres psql -c "CREATE USER lmsctl2 WITH PASSWORD 'lmsctl2';"
                  sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON SCHEMA public TO lmsctl2;"
                  sudo -u postgres psql -c "CREATE DATABASE lmsctl2;"
                  sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE lmsctl2 TO lmsctl2;"
                  sudo -u postgres psql -c "ALTER DATABASE lmsctl2 OWNER TO lmsctl2;"
                  sudo -u postgres psql -c "ALTER ROLE lmsctl2 CREATEDB;"
                  sudo -u postgres psql -c "GRANT USAGE ON SCHEMA public TO lmsctl2;"
                  sudo -u postgres psql -c "GRANT CREATE ON SCHEMA public TO lmsctl2;"
                  pytest  -v --exitfirst --cov=now_lms  --use-cases=True --cov-append
            - name: Test with MySQL
              env:
                  CI: True
                  SECRET_KEY: ASD123klj+aAddS
                  DATABASE_URL: mysql+mysqldb://lmsctl:lmsctl@127.0.0.1/lmsctl
                  ADMIN_USER: hello
                  ADMIN_PSWD: world
                  FLASK_APP: now_lms
                  LOG_LEVEL: TRACE
              run: |
                  sudo systemctl start mysql.service
                  mysql -u root -proot -e "CREATE USER 'lmsctl'@'localhost' IDENTIFIED BY 'lmsctl';"
                  mysql -u root -proot -e "CREATE DATABASE lmsctl;"
                  mysql -u root -proot -e "GRANT ALL PRIVILEGES ON lmsctl.* TO 'lmsctl'@'localhost'; FLUSH PRIVILEGES;"
                  pytest  -v --exitfirst --cov=now_lms  --use-cases=True --cov-append
            - uses: codecov/codecov-action@v5
              with:
                  fail_ci_if_error: true # optional (default = false)
                  #files: ./coverage1.xml,./coverage2.xml # optional
                  flags: unittests # optional
                  name: codecov-umbrella # optional
                  token: ${{ secrets.CODECOV_TOKEN }}
                  verbose: true # optional (default = false)
